<%! func ManifestTmpl(w io.Writer, config Config) error %>
<%% import . "github.com/compozed/travel-agent/models" %%>
---
# ci/manifest/manifest.ego
#
# Travel agent manifest template to deploy pivotal ops manager tiles to
# multiple environments
#
# DO NOT MAKE CHANGES TO THIS FILE. Instead modify
# the travel-agent.yml or settings.yml file for this pipeline.
#
# Author:
#   Alan Moran;  bonzofenix@gmail.com
#   Anand Gopal; pegangandkumar@gmail.com
#   Joe Goller;  joe.goller@gmail.com

meta:
  pipeline:
    uri: https://github.com/bonzofenix/tile-ta-deployment

  git:
    username: (( param "git username for ci bot commits when upgrading secrets" ))
    email: (( param "git email for ci bot commits when upgrading secrets" ))

<% for _, env := range config.Envs { %>
  <%= env.Name %>_deploy_params: &<%= env.Name %>_deploy_params
    OM_TARGET:                   (( grab meta.<%= env.Name %>.om_target ))
    OM_CLIENT_ID:                (( grab meta.<%= env.Name %>.om_client_id || "" ))
    OM_CLIENT_SECRET:            (( grab meta.<%= env.Name %>.om_client_secret || "" ))
    OM_USERNAME:                 (( grab meta.<%= env.Name %>.om_username ))
    OM_PASSWORD:                 (( grab meta.<%= env.Name %>.om_password ))
    OM_SKIP_SSL_VALIDATION:      (( grab meta.<%= env.Name %>.om_skip_ssl_validation || false ))
    OM_TRACE:                    (( grab meta.<%= env.Name %>.om_trace || false ))

    CUSTOM_ROOT_CA:                 (( grab meta.custom_root_ca || ""))
    CUSTOM_INTERMEDIATE_CA:         (( grab meta.custom_intermediate_ca || ""))

    GIT_USERNAME:                (( grab meta.git.username ))
    GIT_EMAIL:                   (( grab meta.git.email ))

    DRY_RUN:                     (( grab meta.<%= env.Name %>.dry_run || false ))
    DEBUG:                       (( grab meta.<%= env.Name %>.debug || false ))
<% } %>

  vault_params: &vault_params
    VAULT_ADDR:          (( grab meta.vault.address ))
    VAULT_TOKEN:         (( grab meta.vault.token ))
    VAULT_SKIP_VERIFY:   (( grab meta.vault.skip_verify || true ))

groups:
<% if config.HasFeature("update_deployment") { %>
- name: update
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-update
<% } %>
<% } %>

- name: upgrade
  jobs:
<% if config.HasFeature("pin_versions") { %>
  - pin-resources
<% } %>
<% if config.HasFeature("slack_updates") { %>
  - tile-updates
<% } %>
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-upgrade
<% } %>

<% if config.HasEnvsWithFeature("backup") { %>
- name: backup
  jobs:
<% for _, env := range config.EnvsWithFeature("backup") { %>
  - <%= env.Name %>-backup
<% } %>

- name: restore
  jobs:
  <% for _, env := range config.EnvsWithFeature("restore") { %>
  - <%= env.Name %>-restore
  <% } %>
<% } %>

<% if config.HasEnvsWithFeature("allow_destroy") { %>
- name: destroy
  jobs:
<% for _, env := range config.EnvsWithFeature("allow_destroy") { %>
  - <%= env.Name %>-destroy
  <% } %>
<% } %>

<% artifactoryStemcell := false %>

jobs:

<% if config.HasFeature("slack_updates") { %>
- name: tile-updates
  plan:
  - get: <%= config.Name %>-new-tile
    params:
      globs: []
    trigger: true
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack_updates.channel ))
        username: (( grab meta.slack_updates.username ))
        icon_url: (( grab meta.slack_updates.icon_url ))
        text: "New <%= config.Name %> tile available"
<% } %>

<% if config.HasFeature("pin_versions") { %>
- name: pin-resources
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= config.Name %>-pins
      trigger: true
  - task: run
    file: pipeline/ci/tasks/pin-resources.yml
    params:
      CUSTOM_ROOT_CA:                 (( grab meta.custom_root_ca || "" ))

      CUSTOM_INTERMEDIATE_CA:         (( grab meta.custom_intermediate_ca || "" ))
      DEBUG:              (( grab meta.debug || false ))
      PIPELINE_NAME:      <%= config.Name %>
      PINS_FILE:          (( grab meta.pins_file ))
      CONCOURSE_TARGET:   (( grab meta.concourse.target ))
      CONCOURSE_USERNAME: (( grab meta.concourse.user ))
      CONCOURSE_PASSWORD: (( grab meta.concourse.password ))
      CONCOURSE_TEAM:     (( grab meta.concourse.team ))
<% } %>

<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-upgrade
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
      <% if env.HasDependencies() { %>
      passed:
        <% for _, dependency := range env.DependsOn { %>
        - <%= dependency %>-upgrade
        <% } %>
      <% } else { %>
      passed: []
      <% } %>
    - get: tile
      resource: <%= config.Name %>-tile
      params:
        globs: [ (( grab meta.glob || "*.pivotal" )) ]
      <% if env.HasDependencies() { %>
      passed:
        <% for _, dependency := range env.DependsOn { %>
        - <%= dependency %>-upgrade
        <% } %>
      <% } else { %>
      passed: []
      <% } %>
    - get: config
      resource: <%= env.Name %>-config
    - get: metadata
    - put: lock
      params:
        claim: <%= env.Name %>
  <% if env.HasFeature("artifactory_stemcell") { %>
  <% artifactoryStemcell = true %>
    - get: stemcell
  <% } else { %>
  - task: stemcell
    file: pipeline/ci/tasks/get-stemcell.yml
    params:
      IAAS:                        (( grab meta.iaas_type ))
      PIVNET_API_TOKEN:            (( grab meta.pivnet_token ))
      <<: *<%= env.Name %>_deploy_params
  <% } %>

  <% if env.HasFeature("backup") { %>
  - task: backup
    file: pipeline/ci/tasks/backup.yml
   # params:
    on_success:
      put: <%= env.Name %>-<%= config.Name %>-s3-backup
      params:
        file: output/backup.tgz
    on_failure:
     task: cleanup-<%= config.Name %>
     file: pipeline/ci/tasks/cleanup.yml
    params:
      DEBUG:              (( grab meta.<%= env.Name %>.debug || false ))
      BOSH_TARGET:        (( grab meta.<%= env.Name %>.bosh_target ))
      BOSH_CLIENT:        (( grab meta.<%= env.Name %>.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.<%= env.Name %>.bosh_client_secret ))
      BOSH_CA_CERT:       (( grab meta.<%= env.Name %>.bosh_ca_cert ))
      DEPLOYMENT_NAME:    (( grab meta.<%= env.Name %>.deployment_name ))
      BBR_USERNAME:       (( grab meta.<%= env.Name %>.bbr_username ))
      BBR_SSH_KEY:        (( grab meta.<%= env.Name %>.bbr_ssh_key ))
  <% } %>

  <% if env.HasFeature("service_now") { %>
  - task: create_service_now_change_record
    file: pipeline/ci/tasks/service-now/create_change_request.yml
    params:
      BASE_PAYLOAD: (( grab meta.<%= env.Name %>.service_now.create_change_record_payload ))
      DEBUG:        (( grab meta.<%= env.Name %>.debug || false ))

      SNOW_USERNAME: (( grab meta.<%= env.Name %>.service_now.username ))
      SNOW_PASSWORD: (( grab meta.<%= env.Name %>.service_now.password ))
      SNOW_API_URL: (( grab meta.<%= env.Name %>.service_now.api_url ))

      RUNNING_ESTIMATED_TIME: (( grab meta.service_now.running_estimated_time || "1 hour" ))

      DRY_RUN: (( grab meta.<%= env.Name %>.service_now.dry_run || false ))

    <% if env.Feature("service_now") == "create-and-close" { %>
      SNOW_ACCEPT_CHANGE_REQUEST:  true
    <% } %>
  <% } %>

  - task: upgrade
    file: pipeline/ci/tasks/upgrade.yml
    params:
      <<: *<%= env.Name %>_deploy_params
      <<: *vault_params
      NETWORK_CONFIG:      (( grab meta.<%= env.Name %>.network_config ))
      PROPERTIES_CONFIG:   (( grab meta.<%= env.Name %>.properties_config ))
      RESOURCES_CONFIG:    (( grab meta.<%= env.Name %>.resources_config ))
      ERRANDS_CONFIG:      (( grab meta.<%= env.Name %>.errands_config || "" ))
      PRODUCT_NAME:        (( grab meta.product_name ))
      REPLICATOR_NAME:     (( grab meta.replicator_name || "" ))
      WINDOWS:             (( grab meta.windows || false ))
      STORE_FILE:          (( grab meta.<%= env.Name %>.store_file ))
      YAML2VAULT_PREFIX:   (( grab meta.<%= env.Name %>.yaml2vault_prefix ))
    <% if env.HasFeature("slack_updates") || env.Feature("service_now") == "create-and-close" { %>
    on_success:
      do:
      <% if env.HasFeature("slack_updates") { %>
      - put: notify
        params:
          channel:  (( grab meta.slack_updates.channel ))
          username: (( grab meta.slack_updates.username ))
          icon_url: (( grab meta.slack_updates.success.icon_url ))
          text: "Finish <%= config.Name %> tile deployment successfully"
      <% } %>
      <% if env.Feature("service_now") == "create-and-close" { %>
      - task: close_service_now_change_task
        file: pipeline/ci/tasks/service-now/close_change_task.yml
        params:
          SNOW_USERNAME: (( grab meta.<%= env.Name %>.service_now.username ))
          SNOW_PASSWORD: (( grab meta.<%= env.Name %>.service_now.password ))
          SNOW_API_URL: (( grab meta.<%= env.Name %>.service_now.api_url ))

          IMPLEMENTATION_RESULT: "Implemented - Successfully"

          DEBUG:    (( grab meta.<%= env.Name %>.debug || false ))
      <% } %>
    on_failure:
      do:
      <% if env.HasFeature("slack_updates") { %>
      - put: notify
        params:
          channel:  (( grab meta.slack_updates.channel ))
          username: (( grab meta.slack_updates.username ))
          icon_url: (( grab meta.slack_updates.failure.icon_url ))
          text: "Finish <%= config.Name %> tile deployment with failure"
      <% } %>
      <% if env.Feature("service_now") == "create-and-close" { %>
      - task: close_service_now_change_task
        file: pipeline/ci/tasks/service-now/close_change_task.yml
        params:
          SNOW_USERNAME: (( grab meta.<%= env.Name %>.service_now.username ))
          SNOW_PASSWORD: (( grab meta.<%= env.Name %>.service_now.password ))
          SNOW_API_URL: (( grab meta.<%= env.Name %>.service_now.api_url ))

          IMPLEMENTATION_RESULT: "Implemented - With error / issue"
      <% } %>
    <% } %>

  ensure: &<%= env.Name %>-ensure
    put: config
    resource: <%= env.Name %>-config
    params:
      repository: config-mod
      rebase: true
    on_success:
      put: lock
      params:
        release: lock

<% if config.HasFeature("update_deployment") { %>
- name: <%= env.Name %>-update
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
      <% if env.HasDependencies() { %>
      passed:
        <% for _, dependency := range env.DependsOn { %>
        - <%= dependency %>-update
        <% } %>
      <% } else { %>
      passed: []
      <% } %>
    - get: config
      resource: <%= env.Name %>-config
    - get: metadata
    - put: lock
      params:
        claim: <%= env.Name %>
  - task: update
    file: pipeline/ci/tasks/update.yml
    params:
      <<: *<%= env.Name %>_deploy_params
      <<: *vault_params
      NETWORK_CONFIG:      (( grab meta.<%= env.Name %>.network_config ))
      PROPERTIES_CONFIG:   (( grab meta.<%= env.Name %>.properties_config ))
      RESOURCES_CONFIG:    (( grab meta.<%= env.Name %>.resources_config ))
      ERRANDS_CONFIG:      (( grab meta.<%= env.Name %>.errands_config || "" ))
      PRODUCT_NAME:        (( grab meta.product_name ))
      STORE_FILE:          (( grab meta.<%= env.Name %>.store_file ))
      YAML2VAULT_PREFIX:   (( grab meta.<%= env.Name %>.yaml2vault_prefix ))
  ensure:
    <<: *<%= env.Name %>-ensure
<% } %>

<% if env.HasFeature("allow_destroy") { %>
- name: <%= env.Name %>-destroy
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - put: lock
      params:
        claim: <%= env.Name %>
  - task: destroy
    file: pipeline/ci/tasks/destroy.yml
    params:
      <<: *<%= env.Name %>_deploy_params
      PRODUCT_NAME:        (( grab meta.product_name ))
  on_success:
    put: lock
    params:
      release: lock
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-backup
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    <% if env.HasFeature("backup-daily") { %>
    - trigger: true
      get: every-day
    <% } %>
    - get: config
      resource: <%= env.Name %>-config
    - put: lock
      params:
        claim: <%= env.Name %>
  - task: backup
    file: pipeline/ci/tasks/backup.yml
    on_success:
      put: <%= env.Name %>-<%= config.Name %>-s3-backup
      params:
        file: output/backup.tgz
    on_failure:
     task: cleanup-<%= config.Name %>
     file: pipeline/ci/tasks/cleanup.yml
    params:
      DEBUG:               (( grab meta.<%= env.Name %>.debug || false ))
      BOSH_TARGET:         (( grab meta.<%= env.Name %>.bosh_target ))
      BOSH_CLIENT:         (( grab meta.<%= env.Name %>.bosh_client ))
      BOSH_CLIENT_SECRET:  (( grab meta.<%= env.Name %>.bosh_client_secret ))
      BOSH_CA_CERT:        (( grab meta.<%= env.Name %>.bosh_ca_cert ))
      DEPLOYMENT_NAME:     (( grab meta.<%= env.Name %>.deployment_name ))
      BBR_USERNAME:        (( grab meta.<%= env.Name %>.bbr_username ))
      BBR_SSH_KEY:         (( grab meta.<%= env.Name %>.bbr_ssh_key ))
  ensure:
    put: lock
    params:
      release: lock
<% } %>

<% if env.HasFeature("restore") { %>
- name: <%= env.Name %>-restore
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - put: lock
      params:
        claim: <%= env.Name %>
    - get: config
      resource: <%= env.Name %>-config
    - get: backup
      resource: <%= env.Name %>-<%= config.Name %>-s3-backup
      params:
        unpack: true
  - file: pipeline/ci/tasks/restore.yml
    params:
      DEBUG:               (( grab meta.<%= env.Name %>.debug || false ))
      BOSH_TARGET:        (( grab meta.<%= env.Name %>.bosh_target ))
      BOSH_CLIENT:        (( grab meta.<%= env.Name %>.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.<%= env.Name %>.bosh_client_secret ))
      BOSH_CA_CERT:       (( grab meta.<%= env.Name %>.bosh_ca_cert ))
      DEPLOYMENT_NAME:    (( grab meta.<%= env.Name %>.deployment_name ))
      BBR_USERNAME:       (( grab meta.<%= env.Name %>.bbr_username ))
      BBR_SSH_KEY:        (( grab meta.<%= env.Name %>.bbr_ssh_key ))
    task: restore
  ensure:
    put: lock
    params:
      release: lock
<% } %>
<% } %>

resources:
- name: <%= config.Name %>-tile
  type: pivnet
  source:
    api_token:    (( grab meta.pivnet_token ))
    product_slug: (( grab meta.product_slug ))
    sort_by: semver

- name: pipeline
  type: git
  source:
    branch:      (( grab meta.pipeline.branch || "master" ))
    private_key: (( grab meta.pipeline.private_key  || nil ))
    uri:         (( grab meta.pipeline.uri ))

- name: lock
  type: pool
  source:
    uri:         (( grab meta.locks.uri ))
    branch:      (( grab meta.locks.branch || "master" ))
    private_key: (( grab meta.locks.private_key ))
    pool:        (( grab meta.locks.pool ))

- name: metadata
  type: build-metadata

<% if config.HasFeature("slack_updates") { %>
- name: <%= config.Name %>-new-tile
  type: pivnet
  source:
    api_token:    (( grab meta.pivnet_token ))
    product_slug: (( grab meta.product_slug ))
    sort_by: semver

- name: notify
  type: slack-notification
  source:
    url: (( grab meta.slack_updates.uri || "" ))
<% } %>

<% if config.HasFeature("pin_versions") { %>
- name: <%= config.Name %>-pins
  type: git
  source:
    paths:
    - default/<%= config.Name %>/pins.yml
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))
<% } %>

<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-config
  type: git
  source:
    paths:
    - default/<%= config.Name %>
    - <%= env.Name %>/<%= config.Name %>
<% if env.HasFeature("service_now") { %>
    - <%= env.Name %>/service_now
<% } %>
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))

<% if env.HasFeature("backup-daily") { %>
- name: every-day
  type: time
  source:
    interval: 24h
<% } %>

<% if (env.HasFeature("backup") || env.HasFeature("restore")) { %>
- name: <%= env.Name %>-<%= config.Name %>-s3-backup
  source:
    bucket:            (( grab meta.<%= env.Name %>.s3.bucket ))
    versioned_file:    <%= env.Name %>/<%= config.Name %>/backup.tgz
    access_key_id:     (( grab meta.<%= env.Name %>.s3.access_key_id ))
    secret_access_key: (( grab meta.<%= env.Name %>.s3.secret_access_key ))
  type: s3
<% } %>
<% } %>

<% if artifactoryStemcell { %>
- name: stemcell
  type: artifactory
  source:
    endpoint:         (( grab meta.artifactory_stemcell.endpoint || "/" ))
    repository:       (( grab meta.artifactory_stemcell.repository || "" ))
    regex:            (( grab meta.artifactory_stemcell.regex || "*" ))
    username:         (( grab meta.artifactory_stemcell.username ))
    password:         (( grab meta.artifactory_stemcell.password ))
<% } %>

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: build-metadata
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

<% if artifactoryStemcell { %>
- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource
    version: 0.1
<% } %>
